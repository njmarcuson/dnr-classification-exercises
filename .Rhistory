classes = append(classes, class)
}
classes
source('exercise1/classifyInventoryUnitFunction.R')
trees = read.csv('trees.csv')
ids = unique(trees$unit_id)
classes = c()
for (id in ids) {
inventoryUnit = subset(trees, trees$unit_id==id)
unitClass = classifyInventoryUnit(inventoryUnit)
classes = append(classes, unitClass)
}
classification = data.frame(unit_id=ids, class=classes)
View(classification)
inventoryUnit = subset(trees, trees$unit_id=="bb12b23b-55e0-4c14-88bb-9c999855b360
")
unitClass = classifyInventoryUnit(inventoryUnit)
unitClass
inventoryUnit = subset(trees, trees$unit_id=="bb12b23b-55e0-4c14-88bb-9c999855b360")
unitClass = classifyInventoryUnit(inventoryUnit)
unitClass
View(inventoryUnit)
unit = inventoryUnit
unit$is_conifer = unit$species %in% c("DF", "WH", "AF", "ES", "LP", "WP")
unit$is_hardwood = unit$species %in% c("RA", "WA", "AS")
unit$dbh12 = unit$dbh >= 12
unit$dbh20 = unit$dbh >= 20
View(unit)
sum(unit$is_conifer)
sum(c(TRUE, TRUE) & c(FALSE, TRUE))
sum(c(TRUE, TRUE) & c(TRUE, TRUE))
sum(c(TRUE, TRUE) & c(FALSE, FALSE))
sum(unit$is_conifer & unit$dbh12)
sum(unit$is_conifer & unit$dbh20)
# main function that completes exercise 1
mainFunction <- function() {
source('exercise1/classifyInventoryUnitFunction.R')
trees = read.csv('trees.csv')
ids = unique(trees$unit_id)
classes = c()
for (id in ids) {
inventoryUnit = subset(trees, trees$unit_id==id)
unitClass = classifyInventoryUnit(inventoryUnit)
classes = append(classes, unitClass)
}
classification = data.frame(unit_id=ids, class=classes)
write.csv(classification, "exercise1/classification.csv")
}
# main function that completes exercise 1
mainFunction <- function() {
source('exercise1/classifyInventoryUnitFunction.R')
trees = read.csv('trees.csv')
ids = unique(trees$unit_id)
classes = c()
for (id in ids) {
inventoryUnit = subset(trees, trees$unit_id==id)
unitClass = classifyInventoryUnit(inventoryUnit)
classes = append(classes, unitClass)
}
classification = data.frame(unit_id=ids, class=classes)
write.csv(classification, "exercise1/classification.csv")
}
# main function that completes exercise 1
mainFunction <- function() {
source('exercise1/classifyInventoryUnitFunction.R')
trees = read.csv('trees.csv')
ids = unique(trees$unit_id)
classes = c()
for (id in ids) {
inventoryUnit = subset(trees, trees$unit_id==id)
unitClass = classifyInventoryUnit(inventoryUnit)
classes = append(classes, unitClass)
}
classification = data.frame(unit_id=ids, class=classes)
print(classification)
write.csv(classification, "exercise1/classification.csv")
}
# main function that completes exercise 1
mainFunction <- function() {
source('exercise1/classifyInventoryUnitFunction.R')
trees = read.csv('trees.csv')
ids = unique(trees$unit_id)
classes = c()
for (id in ids) {
inventoryUnit = subset(trees, trees$unit_id==id)
unitClass = classifyInventoryUnit(inventoryUnit)
classes = append(classes, unitClass)
}
classification = data.frame(unit_id=ids, class=classes)
print(classification)
write.csv(classification, "exercise1/classification.csv")
}
mainFunction()
# main function that completes exercise 1
mainFunction <- function() {
source('exercise1/classifyInventoryUnitFunction.R')
trees = read.csv('trees.csv')
ids = unique(trees$unit_id)
classes = c()
for (id in ids) {
inventoryUnit = subset(trees, trees$unit_id==id)
unitClass = classifyInventoryUnit(inventoryUnit)
classes = append(classes, unitClass)
}
classification = data.frame(unit_id=ids, class=classes)
write.csv(classification, "exercise1/classification.csv", row.names=FALSE)
}
mainFunction()
classificationSpecs = {}
classificationSpecs = {
'A'="asdfasdfa"
}
classificationSpecs = {
'A'="123",
classification = data.frame()
View(classification)
classification = data.frame('number_of_trees', 'set', 'dbh')
View(classification)
classification = data.frame('number_of_trees'=c(), 'set'=c(), 'dbh'=c())
View(classification)
classA = data.frame(
'number_of_trees'=c(10, 20),
'species_type'=c('conifer', 'conifer'),
'dbh'=c(20, 12)
)
View(classA)
View(classA)
c(classA, classB, classC)
classA = data.frame(
'number_of_trees'=c(10, 20),
'species_type'=c('conifer', 'conifer'),
'dbh'=c(20, 12)
)
classB = data.frame(
'number_of_trees'=c(20),
'species_type'=c('conifer'),
'dbh'=c(12)
)
classC = data.frame(
'number_of_trees'=c(10),
'species_type'=c('hardwood'),
'dbh'=c(0)
)
c(classA, classB, classC)
classA = list(
data.frame(
'number_of_trees'=c(10, 20),
'species_type'=c('conifer', 'conifer'),
'dbh'=c(20, 12)
))
classA = list(
'classification'=data.frame(
'number_of_trees'=c(10, 20),
'species_type'=c('conifer', 'conifer'),
'dbh'=c(20, 12)
))
classA = list(
'class_name'='A',
'class_rules'=data.frame(
'number_of_trees'=c(10, 20),
'species_type'=c('conifer', 'conifer'),
'dbh'=c(20, 12)
)
)
classA = list(
'class_name'='A',
'class_rules'=data.frame(
'number_of_trees'=c(10, 20),
'species_type'=c('conifer', 'conifer'),
'dbh'=c(20, 12)
)
)
classB = list(
'class_name'='B',
'class_rules'=data.frame(
'number_of_trees'=c(20),
'species_type'=c('conifer'),
'dbh'=c(12)
)
)
classC = list(
'class_name'='C',
'class_rules'=data.frame(
'number_of_trees'=c(10),
'species_type'=c('hardwood'),
'dbh'=c(0)
)
)
c(classA, classB, classC)
list(classA, classB, classC)
classes = list(classA, classB, classC)
classes[[1]]
classes[[2]]
classes[[3]]
source('exercise2/getClassificationFunction.R')
source('exercise2/getClassificationsFunction.R')
classificationRules = getClassifications()
View(classificationRules)
# helper function to get the classifications specified in the exercise
getClassifications = function() {
classA = list(
'class_name'='A',
'class_rules'=data.frame(
'number_of_trees'=c(10, 20),
'species_type'=c('conifer', 'conifer'),
'dbh'=c(20, 12)
)
)
classB = list(
'class_name'='B',
'class_rules'=data.frame(
'number_of_trees'=c(20),
'species_type'=c('conifer'),
'dbh'=c(12)
)
)
classC = list(
'class_name'='C',
'class_rules'=data.frame(
'number_of_trees'=c(10),
'species_type'=c('hardwood'),
'dbh'=c(0)
)
)
classes = list(classA, classB, classC)
return(classes)
}
classifications = getClassifications()
trees = read.csv('trees.csv')
View(trees)
unit = subset(trees, trees$unit_id=="896baae2-21e6-4ffe-bfe2-42c5cf689d2a")
View(unit)
unit$is_conifer = unit$species %in% c("DF", "WH", "AF", "ES", "LP", "WP")
unit$is_hardwood = unit$species %in% c("RA", "WA", "AS")
unit$dbh12 = unit$dbh >= 12
unit$dbh20 = unit$dbh >= 20
classification = classifications[[1]]
View(classification)
classRules = classifcations[['class_rules']]
classRules = classification[['class_rules']]
View(classRules)
n = classRules['number_of_trees']
row = 1
n = classRules[row, 'number_of_trees']
s = classRules[row, 'species_type']
d = classRules[row, 'dbh']
is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwoord
is_specified_treetype
is_specified_treetype = if(s=="asdfadsfas") unit$is_conifer else unit$is_hardwoord
is_specified_treetype
s="hardwoord"
is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwoord
is_specified_treetype
s="conifer"
is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwoord
s="hardwood"
is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwood
is_specified_treetype
unit$is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwood
unit$clears_diameter = unit$dbh >= d
n = classRules[row, 'number_of_trees']
s = classRules[row, 'species_type']
d = classRules[row, 'dbh']
unit$is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwood
unit$clears_diameter = unit$dbh >= d
classificationRules = getClassificationRules()
for (classificationRule in classificationRules) {
print(classificationRule)
}
classificationRules = getClassificationRules()
getClassificationRules = function() {
classA = list(
'class_name'='A',
'class_rules'=data.frame(
'number_of_trees'=c(10, 20),
'species_type'=c('conifer', 'conifer'),
'dbh'=c(20, 12)
)
)
classB = list(
'class_name'='B',
'class_rules'=data.frame(
'number_of_trees'=c(20),
'species_type'=c('conifer'),
'dbh'=c(12)
)
)
classC = list(
'class_name'='C',
'class_rules'=data.frame(
'number_of_trees'=c(10),
'species_type'=c('hardwood'),
'dbh'=c(0)
)
)
classes = list(classA, classB, classC)
return(classes)
}
classificationRules = getClassificationRules()
for (classificationRule in classificationRules) {
print(classificationRule)
}
classDefinitions = getClassificationDefinitions()
getClassificationDefinitions = function() {
classA = list(
'class_name'='A',
'class_rules'=data.frame(
'number_of_trees'=c(10, 20),
'species_type'=c('conifer', 'conifer'),
'dbh'=c(20, 12)
)
)
classB = list(
'class_name'='B',
'class_rules'=data.frame(
'number_of_trees'=c(20),
'species_type'=c('conifer'),
'dbh'=c(12)
)
)
classC = list(
'class_name'='C',
'class_rules'=data.frame(
'number_of_trees'=c(10),
'species_type'=c('hardwood'),
'dbh'=c(0)
)
)
classes = list(classA, classB, classC)
return(classes)
}
classDefinitions = getClassificationDefinitions()
trees = read.csv('trees.csv')
unit = subset(trees, trees$unit_id=="896baae2-21e6-4ffe-bfe2-42c5cf689d2a")
unit$is_conifer = unit$species %in% c("DF", "WH", "AF", "ES", "LP", "WP")
unit$is_hardwood = unit$species %in% c("RA", "WA", "AS")
unitClass = "UNKNOWN"
for (classDefinition in classDefinitions) {
className = classDefinitions[['class_name']]
classRules = classDefinitions[['class_rules']]
passesCriterion = TRUE
for (row in 1:nrow(classRules)) {
n = classRules[row, 'number_of_trees']
s = classRules[row, 'species_type']
d = classRules[row, 'dbh']
unit$is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwood
unit$clears_diameter = unit$dbh >= d
passesCriteria = sum(unit$is_specified_treetype & unit$clears_diameter) >= n
if (!passesCriteria) {
passesCriterion = FALSE
break
}
}
if (passesCriterion) {
unitClass = className
break
}
}
classDefinitions = getClassificationDefinitions()
trees = read.csv('trees.csv')
unit = subset(trees, trees$unit_id=="896baae2-21e6-4ffe-bfe2-42c5cf689d2a")
unit$is_conifer = unit$species %in% c("DF", "WH", "AF", "ES", "LP", "WP")
unit$is_hardwood = unit$species %in% c("RA", "WA", "AS")
unitClass = "UNKNOWN"
for (classDefinition in classDefinitions) {
className = classDefinitions[['class_name']]
print(className)
classRules = classDefinitions[['class_rules']]
passesCriterion = TRUE
for (row in 1:nrow(classRules)) {
n = classRules[row, 'number_of_trees']
s = classRules[row, 'species_type']
d = classRules[row, 'dbh']
unit$is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwood
unit$clears_diameter = unit$dbh >= d
passesCriteria = sum(unit$is_specified_treetype & unit$clears_diameter) >= n
if (!passesCriteria) {
passesCriterion = FALSE
break
}
}
if (passesCriterion) {
unitClass = className
break
}
}
classDefinitions
classDefinitions = getClassificationDefinitions()
trees = read.csv('trees.csv')
unit = subset(trees, trees$unit_id=="896baae2-21e6-4ffe-bfe2-42c5cf689d2a")
unit$is_conifer = unit$species %in% c("DF", "WH", "AF", "ES", "LP", "WP")
unit$is_hardwood = unit$species %in% c("RA", "WA", "AS")
unitClass = "UNKNOWN"
for (classDefinition in classDefinitions) {
className = classDefinition[['class_name']]
print(className)
classRules = classDefinition[['class_rules']]
passesCriterion = TRUE
for (row in 1:nrow(classRules)) {
n = classRules[row, 'number_of_trees']
s = classRules[row, 'species_type']
d = classRules[row, 'dbh']
unit$is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwood
unit$clears_diameter = unit$dbh >= d
passesCriteria = sum(unit$is_specified_treetype & unit$clears_diameter) >= n
if (!passesCriteria) {
passesCriterion = FALSE
break
}
}
if (passesCriterion) {
unitClass = className
break
}
}
unitClass
classDefinitions = getClassificationDefinitions()
trees = read.csv('trees.csv')
unit = subset(trees, trees$unit_id=="ded3c096-61fa-4335-b581-904dbb1d968d")
unit$is_conifer = unit$species %in% c("DF", "WH", "AF", "ES", "LP", "WP")
unit$is_hardwood = unit$species %in% c("RA", "WA", "AS")
unitClass = "UNKNOWN"
for (classDefinition in classDefinitions) {
className = classDefinition[['class_name']]
classRules = classDefinition[['class_rules']]
passesCriterion = TRUE
for (row in 1:nrow(classRules)) {
n = classRules[row, 'number_of_trees']
s = classRules[row, 'species_type']
d = classRules[row, 'dbh']
unit$is_specified_treetype = if(s=="conifer") unit$is_conifer else unit$is_hardwood
unit$clears_diameter = unit$dbh >= d
passesCriteria = sum(unit$is_specified_treetype & unit$clears_diameter) >= n
if (!passesCriteria) {
passesCriterion = FALSE
break
}
}
if (passesCriterion) {
unitClass = className
break
}
}
print(unitClass)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# main function that completes exercise 1
mainFunction <- function() {
source('exercise1/classifyInventoryUnitFunction1.R')
trees = read.csv('trees.csv')
ids = unique(trees$unit_id)
classes = c()
for (id in ids) {
inventoryUnit = subset(trees, trees$unit_id==id)
unitClass = classifyInventoryUnit1(inventoryUnit)
classes = append(classes, unitClass)
}
classification = data.frame(unit_id=ids, class=classes)
write.csv(classification, "exercise1/classification.csv", row.names=FALSE)
}
mainFunction()
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
mainFunction2 = function() {
source('exercise2/getClassificationDefinitionsFunction.R')
source('exercise2/classifyInventoryUnitFunction2.R')
trees = read.csv('trees.csv')
classDefinitions = getClassificationDefinitions()
ids = unique(trees$unit_id)
classes = c()
for (id in ids) {
inventoryUnit = subset(trees, trees$unit_id==id)
unitClass = classifyInventoryUnit2(inventoryUnit, classDefinitions, unknown="D")
classes = append(classes, unitClass)
}
classification = data.frame(unit_id=ids, class=classes)
write.csv(classification, "exercise2/classification.csv", row.names=FALSE)
}
mainFunction2()
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
for (row in 1:0) {
print(row)
}
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise1/mainFunction1.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
source("~/dnr-classification-exercises/exercise2/mainFunction2.R")
mainFunction2 = function(trees, classDefinitions) {
source('exercise2/getClassificationDefinitionsFunction.R')
ids = unique(trees$unit_id)
classes = c()
for (id in ids) {
inventoryUnit = subset(trees, trees$unit_id==id)
unitClass = classifyInventoryUnit2(inventoryUnit, classDefinitions)
classes = append(classes, unitClass)
}
classification = data.frame(unit_id=ids, class=classes)
write.csv(classification, "exercise2/classification.csv", row.names=FALSE)
}
